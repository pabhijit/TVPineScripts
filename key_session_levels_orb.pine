//@version=6
indicator("Key Session Levels (Prev Day + Overnight) + ORB + Stubs", overlay=true)

// ===== Inputs
showTodayOnly   = input.bool(true,  "Show Today Only")
showRightLabels = input.bool(true,  "Right-edge Labels")
rightOffsetBars = input.int (20,    "Right Label Offset (bars)", minval=1, maxval=500)
showLegendTbl   = input.bool(true,  "Show Top-Right Legend")
useColors       = input.bool(true,  "Color-code Levels")

// --- Stub controls (short level lines at right edge)
grpStub          = "Level Line Style"
useStubs         = input.bool(true,  "Use short right-edge stubs", group=grpStub)
alignStubToLabel = input.bool(true,  "Align stub length to label offset", group=grpStub)
stubBarsManual   = input.int(30,     "Stub length (bars) when not aligned", minval=1, maxval=500, group=grpStub)
stubWidth        = input.int(1,      "Stub line width", minval=1, maxval=4, group=grpStub)
stubBars         = alignStubToLabel ? rightOffsetBars : stubBarsManual

// ORB inputs
_ORB       = "Opening Range Break Settings"
ORBrange   = input.session("0930-0945", "Opening Range", group=_ORB)
ORBextend  = input.session("0930-1600", "Extend Range Lines", group=_ORB)
_ORBcolors = "Opening Range Colors"
showORB    = input.bool(true, "Enable Opening Range Box", inline="ORB top", group=_ORBcolors)
BorderColor= input.color(color.new(color.purple, 40), "Border", inline="ORB bottom", group=_ORBcolors)
ShadeColor = input.color(color.new(color.white, 90), "Background", inline="ORB bottom", group=_ORBcolors)
linesWidth = input.int(1, "Width", minval=1, maxval=4, inline="ORB bottom", group=_ORBcolors)

// ===== Sessions & “today”
var string NY_TZ = "America/New_York"
rth       = not na(time(timeframe.period, "0930-1600", NY_TZ))
onSession = not rth
isToday   = (dayofmonth(time) == dayofmonth(timenow)) and (month(time) == month(timenow)) and (year(time) == year(timenow))

// ===== Previous-day levels
pdo = request.security(syminfo.tickerid, "D", open[1],  lookahead=barmerge.lookahead_on)
pdh = request.security(syminfo.tickerid, "D", high[1],  lookahead=barmerge.lookahead_on)
pdl = request.security(syminfo.tickerid, "D", low[1],   lookahead=barmerge.lookahead_on)
pdc = request.security(syminfo.tickerid, "D", close[1], lookahead=barmerge.lookahead_on)

// ===== Overnight range (prior to today’s RTH)
var float onHigh = na
var float onLow  = na
newON  = onSession and not onSession[1]
newRTH = rth and not rth[1]
if newON
    onHigh := high
    onLow  := low
else if onSession
    onHigh := math.max(nz(onHigh, high), high)
    onLow  := math.min(nz(onLow,  low),  low)
var float onh_today = na
var float onl_today = na
if newRTH
    onh_today := onHigh
    onl_today := onLow
ONH = onh_today
ONL = onl_today

// ===== Apply “today only” filter (key levels)
val_pdo = showTodayOnly ? (isToday ? pdo : na) : pdo
val_pdh = showTodayOnly ? (isToday ? pdh : na) : pdh
val_pdl = showTodayOnly ? (isToday ? pdl : na) : pdl
val_pdc = showTodayOnly ? (isToday ? pdc : na) : pdc
val_onh = showTodayOnly ? (isToday ? ONH : na) : ONH
val_onl = showTodayOnly ? (isToday ? ONL : na) : ONL

// ===== Colors
cPDO = useColors ? color.silver : color.white
cPDH = useColors ? color.lime   : color.white
cPDL = useColors ? color.red    : color.white
cPDC = useColors ? color.yellow : color.white
cONH = useColors ? color.teal   : color.white
cONL = useColors ? color.orange : color.white
cEM  = color.new(color.fuchsia, 0)
cFri = color.new(color.blue, 0)

// ===== VWAP =====
grpVWAP      = "VWAP"
showVWAP     = input.bool(true, "Show VWAP", group=grpVWAP)
showVWAPBand = input.bool(false, "Show VWAP ±σ Bands", group=grpVWAP)
bandMult     = input.float(1.0, "StdDev Multiplier", minval=0.1, step=0.1, group=grpVWAP)

vwapLine  = ta.vwap
src       = hlc3
sd        = ta.stdev(src, 20)
vwapUpper = vwapLine + bandMult * sd
vwapLower = vwapLine - bandMult * sd

val_vwap  = showVWAP     ? vwapLine  : na
val_vwup  = showVWAPBand ? vwapUpper : na
val_vwlo  = showVWAPBand ? vwapLower : na

cVWAP = color.new(color.blue, 0)
cVWUP = color.new(color.blue, 50)
cVWLO = color.new(color.blue, 50)

// (When stubs are OFF, show full lines; when stubs are ON, hide plots)
plot(val_pdo,  title="PDO (Prev Open)",       color=cPDO,  linewidth=1, display=useStubs?display.none:display.all)
plot(val_pdh,  title="PDH (Prev High)",       color=cPDH,  linewidth=1, display=useStubs?display.none:display.all)
plot(val_pdl,  title="PDL (Prev Low)",        color=cPDL,  linewidth=1, display=useStubs?display.none:display.all)
plot(val_pdc,  title="PDC (Prev Close)",      color=cPDC,  linewidth=1, display=useStubs?display.none:display.all)
plot(val_onh,  title="ONH (Overnight High)",  color=cONH,  linewidth=1, display=useStubs?display.none:display.all)
plot(val_onl,  title="ONL (Overnight Low)",   color=cONL,  linewidth=1, display=useStubs?display.none:display.all)
plot(val_vwap, title="VWAP",                  color=cVWAP, linewidth=2, display=useStubs?display.none:display.all)
plot(val_vwup, title="VWAP Upper",            color=cVWUP, linewidth=1, display=useStubs?display.none:display.all)
plot(val_vwlo, title="VWAP Lower",            color=cVWLO, linewidth=1, display=useStubs?display.none:display.all)

// ===== ORB sessions pinned to NY time
inORBrange = not na(time(timeframe.period, ORBrange,  NY_TZ))
inExtend   = not na(time(timeframe.period, ORBextend, NY_TZ))
startRTH   = inExtend and not inExtend[1]
startORB   = inORBrange and not inORBrange[1]
endORB     = not inORBrange and inORBrange[1]

// ===== ORB state (only for TODAY)
var int   orbLeft  = na
var int   orbRight = na
var float orbHigh  = na
var float orbLow   = na
var box   orbBox   = na
var bool  orbLive  = false

if not isToday
    if not na(orbBox)
        box.delete(orbBox)
    orbBox := na
    orbLive := false
    orbLeft := na
    orbRight := na
    orbHigh := na
    orbLow  := na

if isToday and startRTH
    if not na(orbBox)
        box.delete(orbBox)
    orbBox := na
    orbLive := false
    orbLeft := na
    orbRight := na
    orbHigh := na
    orbLow  := na

if isToday and showORB and startORB
    orbLeft := bar_index
    orbRight := bar_index
    orbHigh := high
    orbLow  := low
    orbBox := box.new(left=orbLeft, top=orbHigh, right=orbRight, bottom=orbLow, border_color=BorderColor, border_width=linesWidth)
    box.set_bgcolor(orbBox, ShadeColor)
    orbLive := true

if isToday and inORBrange and orbLive
    if high > orbHigh
        orbHigh := high
        box.set_top(orbBox, orbHigh)
    if low < orbLow
        orbLow := low
        box.set_bottom(orbBox, orbLow)

if isToday and inExtend and orbLive
    orbRight := bar_index
    box.set_right(orbBox, orbRight)

orbReady = isToday and orbLive and endORB and inExtend and not na(orbHigh) and not na(orbLow)

// ===== Expected Move (auto vol index + overrides)
grpEM            = "Expected Move"
emMethod         = input.string("IV Proxy (Auto)", "Method", options=["IV Proxy (Auto)","IV Proxy (Override)","Manual IV%","ATR(14)"], group=grpEM)
volIndexOverride = input.symbol("CBOE:VIX", "Vol Index (override)", group=grpEM)
manualIVpct      = input.float(25.0, "Manual IV %", minval=0, group=grpEM)
emSigmaMult      = input.float(1.0, "Sigma multiple", minval=0.1, step=0.1, group=grpEM)
emUsePrevClose   = input.bool(true, "Base on Previous Close (PDC)", group=grpEM)
emATRlen         = input.int(14, "ATR length (if ATR method)", minval=1, group=grpEM)

f_autoVolSym() =>
    sym  = str.upper(syminfo.ticker)
    root = str.upper(syminfo.root)
    exch = str.upper(syminfo.prefix)
    if sym == "SPY" or sym == "SPX" or sym == "SPX500USD" or root == "ES" or root == "MES" or str.substring(sym, 0, 3) == "SPX"
        "CBOE:VIX"
    else if sym == "QQQ" or sym == "NDX" or str.contains(sym, "NAS100") or root == "NQ" or root == "MNQ"
        "CBOE:VXN"
    else if sym == "IWM" or sym == "RUT" or root == "RTY" or str.contains(sym, "US2000")
        "CBOE:RVX"
    else if sym == "DIA" or sym == "DJI" or sym == "DJX" or root == "YM" or str.contains(sym, "US30")
        "CBOE:VXD"
    else
        exch == "NASDAQ" ? "CBOE:VXN" : "CBOE:VIX"

volIndexSymAuto = f_autoVolSym()
useSym = emMethod == "IV Proxy (Auto)" ? volIndexSymAuto : volIndexOverride
basePrice = emUsePrevClose ? pdc : close

volIdx = (emMethod == "IV Proxy (Auto)" or emMethod == "IV Proxy (Override)") ? request.security(useSym, "D", close, lookahead=barmerge.lookahead_on) : na
iv_annual = nz(volIdx) / 100.0
oneDaySigma = iv_annual * math.sqrt(1.0/252.0)
em_from_iv  = basePrice * oneDaySigma * emSigmaMult
em_from_atr = ta.atr(emATRlen) * emSigmaMult
iv_manual   = manualIVpct/100.0
em_from_manual = basePrice * iv_manual * math.sqrt(1.0/252.0) * emSigmaMult

em_val = emMethod == "IV Proxy (Auto)" or emMethod == "IV Proxy (Override)" ? em_from_iv : emMethod == "Manual IV%" ? em_from_manual : em_from_atr

emU_raw = basePrice + em_val
emL_raw = basePrice - em_val
emU = showTodayOnly ? (isToday ? emU_raw : na) : emU_raw
emL = showTodayOnly ? (isToday ? emL_raw : na) : emL_raw

plot(emU, title="EM Upper", color=cEM, linewidth=1, display=useStubs?display.none:display.all)
plot(emL, title="EM Lower", color=cEM, linewidth=1, display=useStubs?display.none:display.all)

// ===== Previous Week's Friday High/Low
grpFriday    = "Friday Levels"
showFridayHL = input.bool(true, "Show Last Friday High/Low", group=grpFriday)
friH_prev = request.security(syminfo.tickerid, "D", ta.valuewhen(dayofweek == dayofweek.friday, high, 1), lookahead=barmerge.lookahead_on)
friL_prev = request.security(syminfo.tickerid, "D", ta.valuewhen(dayofweek == dayofweek.friday, low,  1), lookahead=barmerge.lookahead_on)
val_friH = showFridayHL ? (showTodayOnly ? (isToday ? friH_prev : na) : friH_prev) : na
val_friL = showFridayHL ? (showTodayOnly ? (isToday ? friL_prev : na) : friL_prev) : na
plot(val_friH, title="Friday High (Prev Week)", color=cFri, linewidth=1, display=useStubs?display.none:display.all)
plot(val_friL, title="Friday Low (Prev Week)",  color=cFri, linewidth=1, display=useStubs?display.none:display.all)

// ===== 9/21 EMA Cloud (true candle-hug) + signals =====
grpEMA        = "EMA Cross (9/21)"
showEMAs      = input.bool(true,  "Show 9 & 21 EMAs", group=grpEMA)
lenFast       = input.int(9,      "Fast EMA", minval=1, group=grpEMA)
lenSlow       = input.int(21,     "Slow EMA", minval=1, group=grpEMA)
showSignals   = input.bool(true,  "Show Long/Short Signals", group=grpEMA)
showEMACloud  = input.bool(true,  "Show EMA Cloud", group=grpEMA)
cloudBullCol  = input.color(color.lime, "Bull Cloud Color", group=grpEMA)
cloudBearCol  = input.color(color.red,  "Bear Cloud Color",  group=grpEMA)
cloudTrans    = input.int(80, "Cloud Transparency (0–100)", minval=0, maxval=100, group=grpEMA)
maTrans       = input.int(60, "MA Line Transparency (0–100)", minval=0, maxval=100, group=grpEMA)
useTrueOHLC   = input.bool(false, "Force real OHLC (for HA charts)", group=grpEMA)

// choose price source (fixes HA offset if enabled)
srcH = useTrueOHLC ? request.security(syminfo.tickerid, timeframe.period, high,  lookahead=barmerge.lookahead_on) : high
srcL = useTrueOHLC ? request.security(syminfo.tickerid, timeframe.period, low,   lookahead=barmerge.lookahead_on) : low
srcC = useTrueOHLC ? request.security(syminfo.tickerid, timeframe.period, close, lookahead=barmerge.lookahead_on) : close

// EMAs for trend & signals (close-based)
emaFastC = ta.ema(srcC, lenFast)
emaSlowC = ta.ema(srcC, lenSlow)

// Hugging envelope = EMAs of HIGH/LOW at the fast length
envTop = ta.ema(srcH, lenFast)
envBot = ta.ema(srcL, lenFast)

// Transparent guide lines
colFast = color.new(color.green, maTrans)
colSlow = color.new(color.red,   maTrans)
plot(showEMAs ? emaFastC : na, title="EMA Fast", color=colFast, linewidth=2)
plot(showEMAs ? emaSlowC : na, title="EMA Slow", color=colSlow, linewidth=2)

// Cloud fill
pTop = plot(showEMACloud ? envTop : na, title="EMA Cloud Top", color=color.new(color.gray, 100), linewidth=1, display=display.none)
pBot = plot(showEMACloud ? envBot : na, title="EMA Cloud Bot", color=color.new(color.gray, 100), linewidth=1, display=display.none)
fill(pTop, pBot, color = showEMACloud ? (emaFastC >= emaSlowC ? color.new(cloudBullCol, cloudTrans) : color.new(cloudBearCol, cloudTrans)) : na)

// Signals from 9/21 cross
longSig  = showSignals and ta.crossover(emaFastC, emaSlowC)
shortSig = showSignals and ta.crossunder(emaFastC, emaSlowC)

// Arrow positions just outside the cloud
padTicks = syminfo.mintick * 6.0
plotshape(longSig  ? (envBot - padTicks) : na, title="Long Signal (EMA Bull Cross)", style=shape.triangleup, location=location.absolute, color=color.new(color.lime, 0), size=size.tiny, text="Long")
plotshape(shortSig ? (envTop + padTicks) : na, title="Short Signal (EMA Bear Cross)", style=shape.triangledown, location=location.absolute, color=color.new(color.red,  0), size=size.tiny, text="Short")

// ===== Short Level Stubs (right-edge)
var line sPDO   = na
var line sPDH   = na
var line sPDL   = na
var line sPDC   = na
var line sONH   = na
var line sONL   = na
var line sFriH  = na
var line sFriL  = na
var line sEMu   = na
var line sEMl   = na
var line sVWAP  = na
var line sVWUP  = na
var line sVWLO  = na

f_draw_stub(_h, _y, _col) =>
    if not na(_h)
        line.delete(_h)
    na(_y) ? na : line.new(bar_index, _y, bar_index + stubBars, _y, xloc=xloc.bar_index, extend=extend.none, color=_col, width=stubWidth, style=line.style_solid)

if barstate.islast and useStubs
    // delete old
    if not na(sPDO)  
        line.delete(sPDO)
    if not na(sPDH)  
        line.delete(sPDH)
    if not na(sPDL)  
        line.delete(sPDL)
    if not na(sPDC)  
        line.delete(sPDC)
    if not na(sONH)  
        line.delete(sONH)
    if not na(sONL)  
        line.delete(sONL)
    if not na(sFriH) 
        line.delete(sFriH)
    if not na(sFriL) 
        line.delete(sFriL)
    if not na(sEMu)  
        line.delete(sEMu)
    if not na(sEMl)  
        line.delete(sEMl)
    if not na(sVWAP) 
        line.delete(sVWAP)
    if not na(sVWUP) 
        line.delete(sVWUP)
    if not na(sVWLO) 
        line.delete(sVWLO)

    // re-create short stubs aligned with labels (if chosen)
    sPDO  := f_draw_stub(sPDO,  val_pdo,  cPDO)
    sPDH  := f_draw_stub(sPDH,  val_pdh,  cPDH)
    sPDL  := f_draw_stub(sPDL,  val_pdl,  cPDL)
    sPDC  := f_draw_stub(sPDC,  val_pdc,  cPDC)
    sONH  := f_draw_stub(sONH,  val_onh,  cONH)
    sONL  := f_draw_stub(sONL,  val_onl,  cONL)
    sFriH := f_draw_stub(sFriH, val_friH, cFri)
    sFriL := f_draw_stub(sFriL, val_friL, cFri)
    sEMu  := f_draw_stub(sEMu,  emU,      cEM)
    sEMl  := f_draw_stub(sEMl,  emL,      cEM)
    sVWAP := f_draw_stub(sVWAP, val_vwap, cVWAP)
    sVWUP := f_draw_stub(sVWUP, val_vwup, cVWUP)
    sVWLO := f_draw_stub(sVWLO, val_vwlo, cVWLO)

// ===== Right-edge labels
var label lPDO = na
var label lPDH = na
var label lPDL = na
var label lPDC = na
var label lONH = na
var label lONL = na
var label lEMu = na
var label lEMl = na
var label lFriH = na
var label lFriL = na
var label lVWAP = na

if barstate.islast and showRightLabels
    if not na(lPDO)  
        label.delete(lPDO)
    if not na(lPDH)  
        label.delete(lPDH)
    if not na(lPDL)  
        label.delete(lPDL)
    if not na(lPDC)  
        label.delete(lPDC)
    if not na(lONH)  
        label.delete(lONH)
    if not na(lONL)  
        label.delete(lONL)
    if not na(lEMu)  
        label.delete(lEMu)
    if not na(lEMl)  
        label.delete(lEMl)
    if not na(lFriH) 
        label.delete(lFriH)
    if not na(lFriL) 
        label.delete(lFriL)
    if not na(lVWAP) 
        label.delete(lVWAP)
    if not na(val_pdo)  
        lPDO  := label.new(bar_index + rightOffsetBars, val_pdo, "PDO",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cPDO, size=size.tiny)
    if not na(val_pdh)  
        lPDH  := label.new(bar_index + rightOffsetBars, val_pdh, "PDH",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cPDH, size=size.tiny)
    if not na(val_pdl)  
        lPDL  := label.new(bar_index + rightOffsetBars, val_pdl, "PDL",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cPDL, size=size.tiny)
    if not na(val_pdc)  
        lPDC  := label.new(bar_index + rightOffsetBars, val_pdc, "PDC",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cPDC, size=size.tiny)
    if not na(val_onh)  
        lONH  := label.new(bar_index + rightOffsetBars, val_onh, "ONH",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cONH, size=size.tiny)
    if not na(val_onl)  
        lONL  := label.new(bar_index + rightOffsetBars, val_onl, "ONL",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cONL, size=size.tiny)
    if not na(emU)      
        lEMu  := label.new(bar_index + rightOffsetBars, emU,     "EM+",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cEM,  size=size.tiny)
    if not na(emL)      
        lEMl  := label.new(bar_index + rightOffsetBars, emL,     "EM−",  xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cEM,  size=size.tiny)
    if not na(val_friH) 
        lFriH := label.new(bar_index + rightOffsetBars, val_friH,"FriH", xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cFri, size=size.tiny)
    if not na(val_friL) 
        lFriL := label.new(bar_index + rightOffsetBars, val_friL,"FriL", xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cFri, size=size.tiny)
    if not na(val_vwap) 
        lVWAP := label.new(bar_index + rightOffsetBars, val_vwap,"VWAP", xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_left, textcolor=color.black, color=cVWAP, size=size.tiny)

// ===== Legend (2 cols × 11 rows)
var table t = na
if showLegendTbl
    if na(t)
        t := table.new(position.top_right, 2, 11)
    if barstate.islast
        table.cell(t, 0, 0, "PDO", text_color=color.black, bgcolor=cPDO)
        table.cell(t, 1, 0, na(val_pdo) ? "" : str.tostring(val_pdo, format.mintick), text_color=color.black, bgcolor=color.new(cPDO, 60))
        table.cell(t, 0, 1, "PDH", text_color=color.black, bgcolor=cPDH)
        table.cell(t, 1, 1, na(val_pdh) ? "" : str.tostring(val_pdh, format.mintick), text_color=color.black, bgcolor=color.new(cPDH, 60))
        table.cell(t, 0, 2, "PDL", text_color=color.black, bgcolor=cPDL)
        table.cell(t, 1, 2, na(val_pdl) ? "" : str.tostring(val_pdl, format.mintick), text_color=color.black, bgcolor=color.new(cPDL, 60))
        table.cell(t, 0, 3, "PDC", text_color=color.black, bgcolor=cPDC)
        table.cell(t, 1, 3, na(val_pdc) ? "" : str.tostring(val_pdc, format.mintick), text_color=color.black, bgcolor=color.new(cPDC, 60))
        table.cell(t, 0, 4, "ONH", text_color=color.black, bgcolor=cONH)
        table.cell(t, 1, 4, na(val_onh) ? "" : str.tostring(val_onh, format.mintick), text_color=color.black, bgcolor=color.new(cONH, 60))
        table.cell(t, 0, 5, "ONL", text_color=color.black, bgcolor=cONL)
        table.cell(t, 1, 5, na(val_onl) ? "" : str.tostring(val_onl, format.mintick), text_color=color.black, bgcolor=color.new(cONL, 60))
        table.cell(t, 0, 6, "EM+", text_color=color.black, bgcolor=cEM)
        table.cell(t, 1, 6, na(emU) ? "" : str.tostring(emU, format.mintick), text_color=color.black, bgcolor=color.new(cEM, 60))
        table.cell(t, 0, 7, "EM−", text_color=color.black, bgcolor=cEM)
        table.cell(t, 1, 7, na(emL) ? "" : str.tostring(emL, format.mintick), text_color=color.black, bgcolor=color.new(cEM, 60))
        table.cell(t, 0, 8, "FriH", text_color=color.black, bgcolor=cFri)
        table.cell(t, 1, 8, na(val_friH) ? "" : str.tostring(val_friH, format.mintick), text_color=color.black, bgcolor=color.new(cFri, 60))
        table.cell(t, 0, 9, "FriL", text_color=color.black, bgcolor=cFri)
        table.cell(t, 1, 9, na(val_friL) ? "" : str.tostring(val_friL, format.mintick), text_color=color.black, bgcolor=color.new(cFri, 60))
        table.cell(t, 0, 10, "VWAP", text_color=color.black, bgcolor=cVWAP)
        table.cell(t, 1, 10, na(val_vwap) ? "" : str.tostring(val_vwap, format.mintick), text_color=color.black, bgcolor=color.new(cVWAP, 60))

// ===== Alerts
havePDH = not na(val_pdh)
havePDL = not na(val_pdl)
haveONH = not na(val_onh)
haveONL = not na(val_onl)
alertcondition(havePDH and ta.crossover(close, val_pdh), "Cross Above PDH", "Price crossed ABOVE Previous Day High (PDH)")
alertcondition(havePDH and ta.crossunder(close, val_pdh), "Cross Below PDH", "Price crossed BELOW Previous Day High (PDH)")
alertcondition(havePDL and ta.crossover(close, val_pdl), "Cross Above PDL", "Price crossed ABOVE Previous Day Low (PDL)")
alertcondition(havePDL and ta.crossunder(close, val_pdl), "Cross Below PDL", "Price crossed BELOW Previous Day Low (PDL)")
alertcondition(haveONH and ta.crossover(close, val_onh), "Cross Above ONH", "Price crossed ABOVE Overnight High (ONH)")
alertcondition(haveONH and ta.crossunder(close, val_onh), "Cross Below ONH", "Price crossed BELOW Overnight High (ONH)")
alertcondition(haveONL and ta.crossover(close, val_onl), "Cross Above ONL", "Price crossed ABOVE Overnight Low (ONL)")
alertcondition(haveONL and ta.crossunder(close, val_onl), "Cross Below ONL", "Price crossed BELOW Overnight Low (ONL)")
alertcondition(orbReady and ta.crossover(close, orbHigh), "ORB Breakout Up", "Price broke ABOVE ORB High (today)")
alertcondition(orbReady and ta.crossunder(close, orbLow), "ORB Breakdown",   "Price broke BELOW ORB Low (today)")
alertcondition(longSig,  "EMA 9/21 Bull Cross", "Fast EMA crossed ABOVE Slow EMA (Long Signal)")
alertcondition(shortSig, "EMA 9/21 Bear Cross", "Fast EMA crossed BELOW Slow EMA (Short Signal)")
